{"version":3,"sources":["../src/index.js"],"names":["EDGE_SDK_VERSION","INORBIT_ENDPOINT_DEFAULT","AGENT_VERSION","MQTT_TOPIC_CUSTOM_DATA","MQTT_TOPIC_LOCALIZATION","MQTT_TOPIC_ODOMETRY","RobotSession","robotId","name","settings","agentVersion","appKey","endpoint","logger","info","substr","params","hostname","axios","post","response","status","data","Error","fetchRobotConfig","mqttConfig","protocol","port","username","password","robotApiKey","mqtt","connect","will","topic","payload","qos","retain","ended","end","publish","msg","options","keyValues","customField","JSON","stringify","convertValue","val","String","messages","CustomDataMessage","setCustomField","KeyValuePairs","setPairsList","Object","keys","map","k","item","KeyValueCustomElement","setKey","setValue","setKeyValuePayload","publishProtobuf","ts","x","y","yaw","frameId","LocationAndPoseMessage","setTs","setPosX","setPosY","setYaw","tsStart","distance","linear","angular","speed","OdometryDataMessage","setTsStart","setLinearDistance","setAngularDistance","setLinearSpeed","setAngularSpeed","setSpeedAvailable","serializeBinary","RobotSessionFactory","robotSessionSettings","RobotSessionPool","robotSessionFactory","robotSessions","robotSessionsLastUse","connectPromises","Date","now","build","values","forEach","rs","hasRobot","getSession","sess","Logger","InOrbit","sessionsFactory","explicitConnect","sessionsPool","tearDown","freeRobotSession","publishCustomDataKV","pose","publishPose","odometry","publishOdometry"],"mappings":"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","sourcesContent":["/**\n * InOrbit Edge SDK\n *\n * Javascript interface to the InOrbit Robot Protocol.\n *\n * Copyright 2021 InOrbit, Inc.\n */\nimport axios from 'axios';\nimport mqtt from 'async-mqtt';\nimport messages from './inorbit_pb';\n\nconst EDGE_SDK_VERSION = '0.1.0';\nconst INORBIT_ENDPOINT_DEFAULT = 'https://control.inorbit.ai/cloud_sdk_robot_config';\n// Agent version reported when a robot connection is open using this SDK\nconst AGENT_VERSION = `${EDGE_SDK_VERSION}.edgesdk`;\n\n// MQTT Topics\nconst MQTT_TOPIC_CUSTOM_DATA = 'custom';\nconst MQTT_TOPIC_LOCALIZATION = 'ros/loc/data2';\nconst MQTT_TOPIC_ODOMETRY = 'ros/odometry/data';\n\n/**\n * RobotSession represent the session of a robot connected to InOrbit from the\n * point of view of the robot end. Technically this is a facade that provides\n * a clean interface to the InOrbit Robot Protocol.\n */\nclass RobotSession {\n  /**\n   * Initializes a robot session.\n   *\n   * Note that the session isn't automatically connected. You must call `connect`\n   * before publishing any message.\n   *\n   * @typedef {Settings}\n   * @property {string} appKey\n   * @property {string} endpoint URL of the HTTP endpoint to fetch\n   * robots settings.\n   *\n   * @param {string} robotId\n   * @param {string} name\n   * @param {Settings}\n   */\n  constructor({ robotId, name = 'unknown' }, settings = {}) {\n    this.robotId = robotId;\n    this.name = name;\n    this.agentVersion = AGENT_VERSION;\n    this.appKey = settings.appKey;\n    this.endpoint = settings.endpoint;\n    this.logger = settings.logger;\n  }\n\n  /**\n   * Fetches the configuration for this robot session based on its robotId and\n   * appKey\n   *\n   * @returns {Object} Robot configuration\n   */\n  async fetchRobotConfig() {\n    this.logger.info(`Fetching config for robot ${this.robotId} for appKey ${this.appKey.substr(0, 3)}...`);\n\n    const params = {\n      appKey: this.appKey,\n      robotId: this.robotId,\n      hostname: this.name,\n      agentVersion: this.agentVersion\n    };\n\n    const response = await axios.post(this.endpoint, params);\n    if (response.status != 200 || !response.data) {\n      throw Error(`Failed to fetch config for robot ${this.robotId}`);\n    }\n    // TODO: validate fetched config\n    return response.data;\n  }\n\n  /**\n   * Connects to the InOrbit Platform\n   */\n  async connect() {\n    const mqttConfig = await this.fetchRobotConfig();\n    const { protocol, hostname, port, username, password, robotApiKey } = mqttConfig;\n\n    this.mqtt = await mqtt.connect(protocol + hostname + ':' + port, {\n      username,\n      password,\n      will: {\n        topic: `r/${this.robotId}/state`,\n        payload: `0|${robotApiKey}`,\n        qos: 1,\n        retain: true\n      }\n    });\n\n    if (this.ended) {\n      // In case this session was ended by end() while it was connecting\n      this.mqtt.end();\n    }\n    // TODO(mike) handle errors\n    this.robotApiKey = robotApiKey;\n    return this.publish('state', `1|${robotApiKey}|${this.agentVersion}|${this.name}`, { qos: 1, retain: true });\n  }\n\n  /**\n   * Ends session, disconnecting from cloud services\n   */\n  end() {\n    // Before ending the session, update robot state explicitly as the `will` configured\n    // on the mqtt `connect` method is trigged only if the \"client disconnect badly\"\n    this.logger.info(`Setting robot ${this.robotId} state as offline`);\n    this.publish('state', `0|${this.robotApiKey}|${this.agentVersion}|${this.name}`, { qos: 1, retain: true });\n    this.ended = true;\n    this.mqtt && this.mqtt.end();\n  }\n\n  /**\n   * Publishes a string or Buffer message\n   * @param {string} topic\n   * @param {string|Buffer} msg\n   * @param {Object} options\n   */\n  publish(topic, msg, options) {\n    return this.mqtt.publish(`r/${this.robotId}/${topic}`, msg, options);\n  }\n\n  /**\n   * Publishes a a custom data message containing key-values pairs\n   *\n   * @param {Object} keyValues Dictionary of key-value pairs\n   * @param {String} customField Custom field name\n   */\n  publishCustomDataKV(keyValues, customField = '0') {\n    this.logger.info(`Publishing custom data key-values for robot ${this.robotId} ${JSON.stringify(keyValues)}`);\n\n    function convertValue(val) {\n      return typeof val == 'object' ? JSON.stringify(val) : String(val);\n    }\n\n    // Build protobuf message\n    const msg = new messages.CustomDataMessage();\n    msg.setCustomField(customField);\n    const payload = new messages.KeyValuePairs();\n    payload.setPairsList(Object.keys(keyValues).map((k) => {\n      const item = new messages.KeyValueCustomElement();\n      item.setKey(k);\n      item.setValue(convertValue(keyValues[k]));\n      return item;\n    }));\n    msg.setKeyValuePayload(payload);\n\n    return this.publishProtobuf(MQTT_TOPIC_CUSTOM_DATA, msg);\n  }\n\n  /**\n   * Publishes pose to InOrbit\n   *\n   * @param {number} ts Timestamp in milliseconds\n   * @param {number} x\n   * @param {number} y\n   * @param {number} yaw Yaw in radians\n   * @param {string} frameId Robot's reference frame id\n   */\n  publishPose({ ts, x, y, yaw, frameId }) {\n    this.logger.info(`Publishing pose ${JSON.stringify({ ts, x, y, yaw, frameId })}`);\n\n    const msg = new messages.LocationAndPoseMessage();\n    msg.setTs(ts);\n    msg.setPosX(x);\n    msg.setPosY(y);\n    msg.setYaw(yaw);\n    // TODO(mike) report frameId when we start using it\n    return this.publishProtobuf(MQTT_TOPIC_LOCALIZATION, msg);\n  }\n\n  /**\n   * Publishes odometry data to InOrbit\n   *\n   * @typedef Speed\n   * @property {number} linear Linear speed in m/s\n   * @property {number} angular Angular speed in rad/s\n   *\n   * @typedef Distance\n   * @property {number} linear Linear distance in m\n   * @property {number} angular Angular distance in rad\n   *\n   * @param {number} tsStart when are you counting from.\n   * @param {number} ts when the measurement was taken\n   * @param {Speed} speed\n   * @param {Distance} distance\n   */\n  publishOdometry({ tsStart,\n    ts,\n    distance = { linear: 0, angular: 0 },\n    speed = { linear: 0, angular: 0 } }) {\n    this.logger.info(`Publishing odometry ${JSON.stringify({ tsStart, ts, distance, speed })}`);\n\n    const msg = new messages.OdometryDataMessage();\n    msg.setTsStart(tsStart);\n    msg.setTs(ts);\n    msg.setLinearDistance(distance.linear);\n    msg.setAngularDistance(distance.angular);\n    msg.setLinearSpeed(speed.linear);\n    msg.setAngularSpeed(speed.angular);\n    msg.setSpeedAvailable(true);\n    return this.publishProtobuf(MQTT_TOPIC_ODOMETRY, msg);\n  }\n\n  /**\n   * Publishes a Protocol Buffers message\n   *\n   * @param {string} topic\n   * @param {Object} msg\n   * @param {Object} options\n   */\n  publishProtobuf(topic, msg, options = null) {\n    return this.publish(topic, msg.serializeBinary(), options);\n  }\n}\n\n/**\n * Builds RobotSession objects for a company\n */\nclass RobotSessionFactory {\n  /**\n   * Creates a RobotSession factory\n   *\n   * @typedef {Settings}\n   * @property {string} appKey Company app key\n   * @property {string} endpoint URL of the HTTP endpoint to fetch\n   * robots settings.\n   *\n   * @param {Settings} robotSessionSettings\n   */\n  constructor(robotSessionSettings) {\n    this.robotSessionSettings = robotSessionSettings;\n  }\n\n  /**\n   * Builds a RobotSession for a robot\n   *\n   * @param {string} robotId\n   * @param {string} name\n   * @returns {RobotSession}\n   */\n  build({ robotId, name }) {\n    return new RobotSession({\n      robotId,\n      name,\n    },\n    this.robotSessionSettings);\n  }\n}\n\n/**\n * Pool of robot sessions that handles connections for many robots in an\n * efficient way.\n */\nclass RobotSessionPool {\n  constructor(robotSessionFactory) {\n    this.robotSessionFactory = robotSessionFactory;\n    this.robotSessions = {};\n    this.robotSessionsLastUse = {};\n    this.connectPromises = {};\n  }\n\n  /**\n   * Returns a connected RobotSession for a robot.\n   *\n   * @param {string} robotId\n   * @param {string} name\n   * @returns RobotSession\n   */\n  async getSession({ robotId, name }) {\n    this.robotSessionsLastUse[robotId] = Date.now();\n    if (!this.robotSessions[robotId]) {\n      this.robotSessions[robotId] = this.robotSessionFactory.build({ robotId, name });\n\n      // This connectPromises guarantees that this method always returns a connected\n      // session, but it doesn't invoke RobotSession's connect more than once\n      this.connectPromises[robotId] = this.robotSessions[robotId].connect();\n    }\n    // Since we await for the connect before returning\n    await this.connectPromises[robotId];\n    return this.robotSessions[robotId];\n  }\n\n  /**\n   * Ends all sessions\n   */\n  tearDown() {\n    Object.values(this.robotSessions).forEach((rs) => rs.end());\n    this.robotSessions = {};\n    this.robotSessionsLastUse = {};\n    this.connectPromises = {};\n  }\n\n  /**\n   * Returns if there is a robot session associated to the robotId\n   * @param {string} robotId\n   * @returns {boolean}\n   */\n  hasRobot(robotId) {\n    return robotId in this.robotSessions;\n  }\n\n  /**\n   * Disconnects and frees a robot session\n   * @param {string} robotId\n   */\n  async freeRobotSession(robotId) {\n    if (!this.hasRobot(robotId)) {\n      return;\n    }\n    const sess = await this.getSession({ robotId });\n    sess.end();\n    delete this.robotSessions[robotId];\n    delete this.robotSessionsLastUse[robotId];\n    delete this.connectPromises[robotId];\n  }\n}\n\nexport class Logger {\n  info() { }\n\n  warn() { }\n\n  error() { }\n}\n\nexport class InOrbit {\n  #sessionsPool;\n\n  #explicitConnect;\n\n  /**\n   * Initializes the InOrbit\n   *\n   * @typedef Logger\n   * @property\n   *\n   * @typedef Settings\n   * @property {string} appKey The account's app key. Used for authentication.\n   * @property {string} endpoint InOrbit endpoint URL. Default to https://api.inorbit.ai\n   * @property {Logger} logger By default a no-op logger is used\n   *\n   * @param {Settings} settings\n   */\n  constructor(settings = {}) {\n    const { appKey, endpoint = INORBIT_ENDPOINT_DEFAULT, logger = new Logger() } = settings;\n    if (!appKey) {\n      throw Error('InOrbit expects appKey as part of the settings');\n    }\n    const sessionsFactory = new RobotSessionFactory({ appKey, endpoint, logger });\n    this.#sessionsPool = new RobotSessionPool(sessionsFactory);\n    this.#explicitConnect = settings.explicitConnect !== false;\n  }\n\n  /**\n   * Opens a connection associated to a robot and returns the session object.\n   *\n   * @see connectRobot\n   * @returns RobotSession\n   */\n  async #getRobotSession({ robotId, name = 'edge-sdk' }) {\n    if (this.#explicitConnect && !this.#sessionsPool.hasRobot(robotId)) {\n      throw new Error('Can\\'t get robot session or send data before connecting. Use connectRobot before sending any data');\n    }\n\n    return this.#sessionsPool.getSession({ robotId, name });\n  }\n\n  /**\n   * Frees all resources and connections used by this InOrbit object\n   */\n  tearDown() {\n    this.sessionsPool.tearDown();\n  }\n\n  /**\n   * Marks a robot as online and initializes the connection. If a connection\n   * is already open, it's reused. So, invoking this method multiple times for\n   * the same robot will create just one connection.\n   *\n   * @param {string} robotId\n   * @param {string} name Name of the robot. This name will be used as the robot's\n   * name if it's the first time it connects to the platform.\n   */\n  async connectRobot({ robotId, name = 'edge-sdk' }) {\n    // Await fo the session creation. This assures that we have a valid connection\n    // to the robot\n    await this.#sessionsPool.getSession({ robotId, name });\n  }\n\n  /**\n   * Marks a robot as offline and frees the connection.\n   *\n   * @param {string} robotId\n   */\n  async disconnectRobot(robotId) {\n    await this.#sessionsPool.freeRobotSession(robotId);\n  }\n\n  /**\n   * Publishes a a custom data message containing key-values pairs\n   *\n   * @param {string} robotId\n   * @param {Object} keyValues Dictionary of key-value pairs\n   * @param {string} customField Custom field name\n   */\n  async publishCustomDataKV(robotId, keyValues, customField = '0') {\n    const sess = await this.#getRobotSession({ robotId });\n    return sess.publishCustomDataKV(keyValues, customField);\n  }\n\n  /**\n   * Publishes pose to InOrbit\n   *\n   * @typedef StampedPose\n   * @property {number} ts Timestamp in milliseconds\n   * @property {number} x\n   * @property {number} y\n   * @property {number} yaw Yaw in radians\n   * @property {string} frameId Robot's reference frame id\n   *\n   * @param {string} robotId Id of the robot\n   * @param {StampedPose} pose Robot pose\n   */\n  async publishPose(robotId, pose) {\n    const sess = await this.#getRobotSession({ robotId });\n    return sess.publishPose(pose);\n  }\n\n  /**\n   * Publishes odometry data to InOrbit\n   *\n   * @typedef Speed\n   * @property {number} linear Linear speed in m/s\n   * @property {number} angular Angular speed in rad/s\n   *\n   * @typedef Distance\n   * @property {number} linear Linear distance in m\n   * @property {number} angular Angular distance in rad\n   *\n   * @typedef StampedOdometry\n   * @property {number} tsStart when are you counting from.\n   * @property {number} ts when the measurement was taken\n   * @property {Distance} distance\n   * @property {Speed} speed\n   *\n   * @param {string} robotId Id of the robot\n   * @param {StampedOdometry} odometry Odometry data\n   */\n  async publishOdometry(robotId, odometry) {\n    const sess = await this.#getRobotSession({ robotId });\n    return sess.publishOdometry(odometry);\n  }\n}\n"],"file":"index.js"}