export class Logger {
    info(): void;
    warn(): void;
    error(): void;
}
export class InOrbit {
    /**
     * Initializes the InOrbit
     *
     * @typedef Logger
     * @property
     *
     * @typedef Settings
     * @property {string} appKey The account's app key. Used for authentication.
     * @property {string} endpoint InOrbit endpoint URL. Default to https://api.inorbit.ai
     * @property {Logger} logger By default a no-op logger is used
     *
     * @param {Settings} settings
     */
    constructor(settings?: {
        /**
         * The account's app key. Used for authentication.
         */
        appKey: string;
        /**
         * InOrbit endpoint URL. Default to https://api.inorbit.ai
         */
        endpoint: string;
        /**
         * By default a no-op logger is used
         */
        logger: {
            /**
             * *
             */
            "": any;
        };
    });
    /**
     * Frees all resources and connections used by this InOrbit object
     */
    tearDown(): void;
    /**
     * Marks a robot as online and initializes the connection. If a connection
     * is already open, it's reused. So, invoking this method multiple times for
     * the same robot will create just one connection.
     *
     * @param {string} robotId
     * @param {string} name Name of the robot. This name will be used as the robot's
     * name if it's the first time it connects to the platform.
     */
    connectRobot({ robotId, name }: string): Promise<void>;
    /**
     * Marks a robot as offline and frees the connection.
     *
     * @param {string} robotId
     */
    disconnectRobot(robotId: string): Promise<void>;
    /**
     * Publishes a a custom data message containing key-values pairs
     *
     * @param {string} robotId
     * @param {Object} keyValues Dictionary of key-value pairs
     * @param {string} customField Custom field name
     */
    publishCustomDataKV(robotId: string, keyValues: any, customField?: string): Promise<any>;
    /**
     * Publishes pose to InOrbit
     *
     * @typedef StampedPose
     * @property {number} ts Timestamp in milliseconds
     * @property {number} x
     * @property {number} y
     * @property {number} yaw Yaw in radians
     * @property {string} frameId Robot's reference frame id
     *
     * @param {string} robotId Id of the robot
     * @param {StampedPose} pose Robot pose
     */
    publishPose(robotId: string, pose: {
        /**
         * Timestamp in milliseconds
         */
        ts: number;
        x: number;
        y: number;
        /**
         * Yaw in radians
         */
        yaw: number;
        /**
         * Robot's reference frame id
         */
        frameId: string;
    }): Promise<any>;
    /**
     * Publishes odometry data to InOrbit
     *
     * @typedef Speed
     * @property {number} linear Linear speed in m/s
     * @property {number} angular Angular speed in rad/s
     *
     * @typedef Distance
     * @property {number} linear Linear distance in m
     * @property {number} angular Angular distance in rad
     *
     * @typedef StampedOdometry
     * @property {number} tsStart when are you counting from.
     * @property {number} ts when the measurement was taken
     * @property {Distance} distance
     * @property {Speed} speed
     *
     * @param {string} robotId Id of the robot
     * @param {StampedOdometry} odometry Odometry data
     */
    publishOdometry(robotId: string, odometry: {
        /**
         * when are you counting from.
         */
        tsStart: number;
        /**
         * when the measurement was taken
         */
        ts: number;
        distance: {
            /**
             * Linear distance in m
             */
            linear: number;
            /**
             * Angular distance in rad
             */
            angular: number;
        };
        speed: {
            /**
             * Linear speed in m/s
             */
            linear: number;
            /**
             * Angular speed in rad/s
             */
            angular: number;
        };
    }): Promise<any>;
    #private;
}
